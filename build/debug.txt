~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~=[,,_,,]:3

xdress failed with the following error:

Traceback (most recent call last):
  File "//anaconda/envs/python3/lib/python3.5/site-packages/xdress/plugins.py", line 372, in execute
    plugin.execute(rc)
  File "//anaconda/envs/python3/lib/python3.5/site-packages/xdress/autodescribe.py", line 2285, in execute
    self.compute_functions(rc)
  File "//anaconda/envs/python3/lib/python3.5/site-packages/xdress/autodescribe.py", line 2436, in compute_functions
    desc = self.compute_desc(fnc, 'func', rc)
  File "//anaconda/envs/python3/lib/python3.5/site-packages/xdress/autodescribe.py", line 2371, in compute_desc
    clang_includes=rc.clang_includes)
  File "//anaconda/envs/python3/lib/python3.5/site-packages/xdress/autodescribe.py", line 2230, in describe
    language=language, clang_includes=clang_includes)
  File "//anaconda/envs/python3/lib/python3.5/site-packages/xdress/autodescribe.py", line 2130, in pycparser_describe
    verbose=verbose, debug=debug, builddir=builddir)
  File "//anaconda/envs/python3/lib/python3.5/site-packages/xdress/astparsers.py", line 119, in memoizer
    value = f(*args, **kwargs)
  File "//anaconda/envs/python3/lib/python3.5/site-packages/xdress/astparsers.py", line 311, in pycparser_parse
    root = pycparser.parse_file(filename, use_cpp=True, **kwargs)
  File "//anaconda/envs/python3/lib/python3.5/site-packages/pycparser/__init__.py", line 93, in parse_file
    return parser.parse(text, filename)
  File "//anaconda/envs/python3/lib/python3.5/site-packages/pycparser/c_parser.py", line 146, in parse
    debug=debuglevel)
  File "//anaconda/envs/python3/lib/python3.5/site-packages/pycparser/ply/yacc.py", line 265, in parse
    return self.parseopt_notrack(input,lexer,debug,tracking,tokenfunc)
  File "//anaconda/envs/python3/lib/python3.5/site-packages/pycparser/ply/yacc.py", line 1047, in parseopt_notrack
    tok = self.errorfunc(errtoken)
  File "//anaconda/envs/python3/lib/python3.5/site-packages/pycparser/c_parser.py", line 1680, in p_error
    column=self.clex.find_tok_column(p)))
  File "//anaconda/envs/python3/lib/python3.5/site-packages/pycparser/plyparser.py", line 55, in _parse_error
    raise ParseError("%s: %s" % (coord, msg))
pycparser.plyparser.ParseError: src/Graph.h:26:2: before: /

~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~=[,,_,,]:3

Run control run-time contents:

RunControl(apiname=<class 'xdress.utils.apiname'>,
 bash_completion=True,
 builddir='build',
 clang_includes=(),
 classes=(),
 clear_parser_cache_period=50,
 debug=True,
 defines=['XDRESS'],
 dtypes_module='dtypes',
 dumpast=NotSpecified,
 dumpdesc=False,
 env={},
 extra_parser_args=[],
 extra_types='xdress_extra_types',
 functions=[ apiname(srcname='constructDebruijnGraphDevice', srcfiles=('src/component.cu', 'src/debruijn.cu', 'src/encoder.cu', 'src/eulertour.cu', 'src/utils.cu'), tarbase='constructDebruijnGraphDevice', tarname='construct_debruijn_graph_device', incfiles=(), sidecars=(), language='c'),
  apiname(srcname='findComponentDevice', srcfiles=('src/component.cu', 'src/debruijn.cu', 'src/encoder.cu', 'src/eulertour.cu', 'src/utils.cu'), tarbase='findComponentDevice', tarname='find_component_device', incfiles=(), sidecars=(), language='c'),
  apiname(srcname='encodeLmer', srcfiles=('src/component.cu', 'src/debruijn.cu', 'src/encoder.cu', 'src/eulertour.cu', 'src/utils.cu'), tarbase='encodeLmer', tarname='encode_lmer', incfiles=(), sidecars=(), language='c'),
  apiname(srcname='encodeLmerComplement', srcfiles=('src/component.cu', 'src/debruijn.cu', 'src/encoder.cu', 'src/eulertour.cu', 'src/utils.cu'), tarbase='encodeLmerComplement', tarname='encode_lmer_complement', incfiles=(), sidecars=(), language='c'),
  apiname(srcname='computeKmer', srcfiles=('src/component.cu', 'src/debruijn.cu', 'src/encoder.cu', 'src/eulertour.cu', 'src/utils.cu'), tarbase='computeKmer', tarname='compute_kmer', incfiles=(), sidecars=(), language='c'),
  apiname(srcname='findEulerDevice', srcfiles=('src/component.cu', 'src/debruijn.cu', 'src/encoder.cu', 'src/eulertour.cu', 'src/utils.cu'), tarbase='findEulerDevice', tarname='find_euler_device', incfiles=(), sidecars=(), language='c'),
  apiname(srcname='executeSwipeDevice', srcfiles=('src/component.cu', 'src/debruijn.cu', 'src/encoder.cu', 'src/eulertour.cu', 'src/utils.cu'), tarbase='executeSwipeDevice', tarname='execute_swipe_device', incfiles=(), sidecars=(), language='c'),
  apiname(srcname='markContigStart', srcfiles=('src/component.cu', 'src/debruijn.cu', 'src/encoder.cu', 'src/eulertour.cu', 'src/utils.cu'), tarbase='markContigStart', tarname='mark_contig_start', incfiles=(), sidecars=(), language='c')],
 includes=['src', '.', '.'],
 make_dtypes=False,
 make_extra_types=True,
 max_callbacks=8,
 os=<module 'os' from '//anaconda/envs/python3/lib/python3.5/os.py'>,
 package='eulercuda',
 packagedir='eulercuda',
 parsers={'c': ['pycparser', 'clang', 'gccxml'], 'c++': ['clang', 'gccxml', 'pycparser']},
 plugins=('xdress.autoall', 'xdress.pep8names', 'xdress.cythongen', 'xdress.extratypes'),
 rc='xdressrc.py',
 sourcedir=NotSpecified,
 stlcontainers_module='stlcontainers',
 ts=TypeSystem(argument_kinds={('vector', 'bool', 0): (TYPE,), ('vector', 'char', 0): (TYPE,)}, base_types={'file', 'exception', 'str', 'float128', 'complex128', 'type', 'int32', 'int128', 'uint32', 'int64', 'int16', 'uint128', 'bool', 'uchar', 'char', 'float64', 'void', 'uint16', 'uint64', 'float32'}, cpp_types=_LazyConfigDict({False: 'false', True: 'true', 'exception': '{extra_types}exception', 'complex128': '{extra_types}complex_t', 'float128': 'long double', 'function': <function TypeSystem.__init__.<locals>.cpp_types_function at 0x101a58f28>, 'set': 'std::set', 'int64': 'long long', 'uchar': 'unsigned char', 'float64': 'double', 'pair': 'std::pair', 'float32': 'float', 'file': 'FILE', 'dict': 'std::map', 'str': 'std::string', 'function_pointer': <function TypeSystem.__init__.<locals>.cpp_types_function_pointer at 0x1080c32f0>, 'False': 'false', 'int32': 'int', 'vector': 'std::vector', 'uint32': 'unsigned long', 'int16': 'short', 'True': 'true', 'bool': 'bool', 'void': 'void', 'char': 'char', 'uint16': 'unsigned short', 'map': 'std::map', 'true': 'true', 'uint64': 'unsigned long long', 'false': 'false'}, TypeSystem()), cython_c2py_conv=_LazyConverterDict({('bool', '*'): ('bool({var}[0])',), 'complex128': ('complex(float({var}.re), float({var}.im))',), 'float128': ('np.array({var}, dtype=np.float128)',), ('file', '*'): ('{extra_types}PyFile_FromFile({var}, "{var}", "r+", NULL)',), ('char', '*'): ('bytes({var}).decode()',), 'uchar': ('chr(<unsigned int> {var})',), ('int16', '*'): ('int({var}[0])',), 'float64': ('float({var})',), TypeMatcher(('set', MatchAny, '*')): ('{t.cython_pytype}(deref({var}))', '{proxy_name} = {t.cython_pytype}(False, False)\n{proxy_name}.set_ptr = {var}\n', 'if {cache_name} is None:\n    {proxy_name} = {t.cython_pytype}(False, False)\n    {proxy_name}.set_ptr = {var}\n    {cache_name} = {proxy_name}\n'), 'pair': ('{t.cython_pytype}({var})', '{proxy_name} = {t.cython_pytype}(False, False)\n{proxy_name}.pair_ptr = &{var}\n', 'if {cache_name} is None:\n    {proxy_name} = {t.cython_pytype}(False, False)\n    {proxy_name}.pair_ptr = &{var}\n    {cache_name} = {proxy_name}\n'), 'float32': ('float({var})',), TypeMatcher((('int32', ('enum', MatchAny, MatchAny)), '*')): ('int({var}[0])',), TypeMatcher((('enum', MatchAny, MatchAny), '*')): ('int({var}[0])',), 'str': ('bytes(<char *> {var}.c_str()).decode()',), ('vector', 'char', 0): ('cdef int i\n{proxy_name}_shape[0] = <np.npy_intp> {var}.size()\n{proxy_name} = np.empty({proxy_name}_shape[0], "U1")\nfor i in range({proxy_name}_shape[0]):\n    {proxy_name}[i] = chr(<int> {var}[i])\n', 'cdef int i\n{proxy_name}_shape[0] = <np.npy_intp> {var}.size()\n{proxy_name} = np.empty({proxy_name}_shape[0], "U1")\nfor i in range({proxy_name}_shape[0]):\n    {proxy_name}[i] = chr(<int> {var}[i])\n', 'cdef int i\nif {cache_name} is None:\n    {proxy_name}_shape[0] = <np.npy_intp> {var}.size()\n    for i in range({proxy_name}_shape[0]):\n        {proxy_name}[i] = chr(<int> {var}[i])\n    {cache_name} = {proxy_name}\n'), 'int32': ('int({var})',), TypeMatcher(((MatchAny, 'const'), '*')): <function TypeSystem.__init__.<locals>.<lambda> at 0x1080c37b8>, ('str', '*'): ('bytes(<char *> {var}[0].c_str()).decode()',), 'bool': ('bool({var})',), 'set': ('{t.cython_pytype}({var})', '{proxy_name} = {t.cython_pytype}(False, False)\n{proxy_name}.set_ptr = &{var}\n', 'if {cache_name} is None:\n    {proxy_name} = {t.cython_pytype}(False, False)\n    {proxy_name}.set_ptr = &{var}\n    {cache_name} = {proxy_name}\n'), ('vector', 'bool', 0): ('cdef int i\n{proxy_name}_shape[0] = <np.npy_intp> {var}.size()\n{proxy_name} = np.PyArray_SimpleNew(1, {proxy_name}_shape, {t.cython_nptypes[0]})\nfor i in range({proxy_name}_shape[0]):\n    {proxy_name}[i] = {var}[i]\n', 'cdef int i\n{proxy_name}_shape[0] = <np.npy_intp> {var}.size()\n{proxy_name} = np.PyArray_SimpleNew(1, {proxy_name}_shape, {t.cython_nptypes[0]})\nfor i in range({proxy_name}_shape[0]):\n    {proxy_name}[i] = {var}[i]\n', 'cdef int i\nif {cache_name} is None:\n    {proxy_name}_shape[0] = <np.npy_intp> {var}.size()\n    {proxy_name} = np.PyArray_SimpleNew(1, {proxy_name}_shape, {nptype[0]})\n    for i in range({proxy_name}_shape[0]):\n        {proxy_name}[i] = {var}[i]\n    {cache_name} = {proxy_name}\n'), 'map': ('{t.cython_pytype}({var})', '{proxy_name} = {t.cython_pytype}(False, False)\n{proxy_name}.map_ptr = &{var}\n', 'if {cache_name} is None:\n    {proxy_name} = {t.cython_pytype}(False, False)\n    {proxy_name}.map_ptr = &{var}\n    {cache_name} = {proxy_name}\n'), ('int32', '*'): ('int({var}[0])',), TypeMatcher(((MatchAny, 'const'), '&')): <function TypeSystem.__init__.<locals>.<lambda> at 0x1080c3730>, 'char': ('chr(<int> {var})',), 'int64': ('int({var})',), ('complex128', '*'): ('complex(float({var}[0].re), float({var}[0].im))',), ('float64', '*'): ('float({var}[0])',), 'nucid': ('nucname.zzaaam({var})',), ('uint16', '*'): ('int({var}[0])',), 'file': ('{extra_types}PyFile_FromFile(&{var}, "{var}", "r+", NULL)',), 'dict': ('dict({var})',), 'function_pointer': <function TypeSystem.__init__.<locals>.cython_c2py_conv_function_pointer at 0x1080c3620>, ('float128', '*'): ('np.array({var}[0], dtype=np.float128)',), 'uint64': ('int({var})',), ('uchar', '*'): ('bytes(<char *> {var}).decode()',), ('float32', '*'): ('float({var}[0])',), 'uint32': ('int({var})',), 'int16': ('int({var})',), 'nucname': ('nucname.name({var})',), 'void': ('None',), ('int64', '*'): ('int({var}[0])',), TypeMatcher((MatchAny, 'const')): <function TypeSystem.__init__.<locals>.<lambda> at 0x1080c36a8>, 'uint16': ('int({var})',), 'vector': ('{proxy_name}_shape[0] = <np.npy_intp> {var}.size()\n{proxy_name} = np.PyArray_SimpleNewFromData(1, {var}_shape, {t.cython_nptypes[0]}, &{var}[0])\n{proxy_name} = np.PyArray_Copy({proxy_name})\n', '{proxy_name}_shape[0] = <np.npy_intp> {var}.size()\n{proxy_name} = np.PyArray_SimpleNewFromData(1, {proxy_name}_shape, {t.cython_nptypes[0]}, &{var}[0])\n', 'if {cache_name} is None:\n    {proxy_name}_shape[0] = <np.npy_intp> {var}.size()\n    {proxy_name} = np.PyArray_SimpleNewFromData(1, {proxy_name}_shape, {t.cython_nptypes[0]}, &{var}[0])\n    {cache_name} = {proxy_name}\n'), ('uint32', '*'): ('int({var}[0])',)}, TypeSystem()), cython_cimports=_LazyImportDict({'function': <function TypeSystem.__init__.<locals>.cython_cimports_functionish at 0x1080c3488>, 'exception': (('{extra_types}',),), 'complex128': (('{extra_types}',),), 'float128': (('{extra_types}',),), 'set': (('libcpp.set', 'set', 'cpp_set'),), 'int64': (('{extra_types}',),), 'uchar': (('{extra_types}',),), 'float64': (None,), 'pair': (('libcpp.utility', 'pair', 'cpp_pair'),), 'float32': (None,), 'nucid': (('pyne', 'cpp_nucname'),), 'file': (('libc.stdio', 'FILE', 'c_file'),), 'dict': (None,), 'str': (('libcpp.string', 'string', 'std_string'),), 'function_pointer': <function TypeSystem.__init__.<locals>.cython_cimports_functionish at 0x1080c3488>, 'int32': (None,), 'vector': (('libcpp.vector', 'vector', 'cpp_vector'),), 'uint32': (('{extra_types}',),), 'int16': (None,), 'nucname': (('pyne', 'cpp_nucname'), ('libcpp.string', 'string', 'std_string')), 'bool': (('libcpp', 'bool', 'cpp_bool'),), 'void': (None,), 'char': (None,), 'uint16': (('{extra_types}',),), 'map': (('libcpp.map', 'map', 'cpp_map'),), ('int32', '*'): 'int *', 'uint64': (('{extra_types}',),)}, TypeSystem()), cython_classnames=_LazyConfigDict({'exception': 'Exception', 'complex128': 'Complex', 'float128': 'Longdouble', 'set': 'Set{value_type}', 'int64': 'Long', 'uchar': 'UChar', 'float64': 'Double', 'pair': 'Pair{key_type}{value_type}', 'float32': 'Float', 'nucid': 'Nucid', 'file': 'File', 'dict': 'Dict', 'str': 'Str', 'int32': 'Int', 'uint64': 'ULong', 'uint32': 'UInt', 'nucname': 'Nucname', 'bool': 'Bool', 'void': 'Void', 'char': 'Char', 'uint16': 'UShort', 'map': 'Map{key_type}{value_type}', 'vector': 'Vector{value_type}'}, TypeSystem()), cython_ctypes=_LazyConfigDict({'function': <function TypeSystem.__init__.<locals>.cython_ctypes_function at 0x1080c3378>, 'exception': '{extra_types}exception', 'complex128': '{extra_types}complex_t', 'float128': '{extra_types}float128', 'set': 'cpp_set', 'int64': '{extra_types}int64', 'uchar': '{extra_types}uchar', 'float64': 'double', 'pair': 'cpp_pair', 'float32': 'float', 'file': 'c_file', 'dict': 'dict', 'str': 'std_string', 'function_pointer': <function TypeSystem.__init__.<locals>.cython_ctypes_function_pointer at 0x1080c3400>, 'int32': 'int', 'vector': 'cpp_vector', 'uint32': '{extra_types}uint32', 'int16': 'short', 'bool': 'cpp_bool', 'void': 'void', 'char': 'char', 'uint16': '{extra_types}uint16', 'map': 'cpp_map', 'uint64': '{extra_types}uint64'}, TypeSystem()), cython_cyimports=_LazyImportDict({'function': <function TypeSystem.__init__.<locals>.cython_cyimports_functionish at 0x1080c3510>, 'exception': (('{extra_types}',),), 'complex128': (('{extra_types}',),), 'float128': (None,), 'set': (('{stlcontainers}',),), 'int64': (None,), 'uchar': (None,), 'float64': (None,), 'pair': (('{stlcontainers}',),), 'float32': (None,), 'nucid': (('pyne', 'nucname'),), 'file': (('{extra_types}',),), 'dict': (None,), 'str': (None,), 'function_pointer': <function TypeSystem.__init__.<locals>.cython_cyimports_functionish at 0x1080c3510>, 'int32': (None,), 'vector': (('numpy', 'as', 'np'), ('{dtypes}',)), 'uint32': (None,), 'int16': (None,), 'nucname': (('pyne', 'nucname'),), 'bool': (None,), 'void': (None,), 'char': (None,), 'uint16': (None,), 'map': (('{stlcontainers}',),), 'uint64': (None,)}, TypeSystem()), cython_cytypes=_LazyConfigDict({'function': 'object', 'exception': '{extra_types}exception', 'complex128': 'object', 'float128': 'long double', 'set': '{stlcontainers}_Set{value_type}', 'int64': 'long long', 'uchar': 'unsigned char', 'float64': 'float', 'pair': '{stlcontainers}_Pair{value_type}', 'float32': 'float', 'file': 'c_file', 'dict': 'dict', 'str': 'char *', 'function_pointer': 'object', 'int32': 'int', 'vector': 'np.ndarray', 'uint32': 'unsigned long', 'int16': 'short', 'bool': 'bool', 'void': 'void', 'char': 'char', 'uint16': 'unsigned short', 'map': '{stlcontainers}_Map{key_type}{value_type}', ('int32', '*'): 'int *', 'uint64': 'unsigned long long'}, TypeSystem()), cython_functionnames=_LazyConfigDict({'function': 'function', 'exception': 'exception', 'complex128': 'complex', 'float128': 'longdouble', 'set': 'set_{value_type}', 'int64': 'long', 'uchar': 'uchar', 'float64': 'double', 'pair': 'pair_{key_type}_{value_type}', 'float32': 'float', 'nucid': 'nucid', 'file': 'file', 'dict': 'dict', 'str': 'str', 'function_pointer': 'functionpointer', 'int32': 'int', 'vector': 'vector_{value_type}', 'uint32': 'uint', 'int16': 'short', 'nucname': 'nucname', 'bool': 'bool', 'void': 'void', 'char': 'char', 'uint16': 'ushort', 'map': 'map_{key_type}_{value_type}', 'uint64': 'ulong'}, TypeSystem()), cython_py2c_conv=_LazyConverterDict({'complex128': ('{extra_types}py2c_complex({var})', False), 'float128': ('<long double> {var}', False), ('file', '*'): ('{extra_types}PyFile_AsFile({var})', False), ('char', '*'): ('{var}_bytes = {var}.encode()', '<char *> {var}_bytes'), TypeMatcher((('vector', MatchAny, '&'), 'const')): ('# {var} is a {t.type}\ncdef int i{var}\ncdef int {var}_size\ncdef {t.cython_npctypes_nopred[0]} * {var}_data\n{var}_size = len({var})\nif isinstance({var}, np.ndarray) and (<np.ndarray> {var}).descr.type_num == {t.cython_nptype}:\n    {var}_data = <{t.cython_npctypes_nopred[0]} *> np.PyArray_DATA(<np.ndarray> {var})\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = {var}_data[i{var}]\nelse:\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = <{t.cython_npctypes_nopred[0]}> {var}[i{var}]\n', '{proxy_name}'), TypeMatcher((('enum', MatchAny, MatchAny), '*')): ('cdef int {proxy_name}_ = {var}', '&{proxy_name}_'), 'nucname': ('nucname.name({var})', False), 'int64': ('<long long> {var}', False), ('void', '*'): ('NULL', False), TypeMatcher(('vector', MatchAny, '&')): ('# {var} is a {t.type}\ncdef int i{var}\ncdef int {var}_size\ncdef {t.cython_npctypes_nopred[0]} * {var}_data\n{var}_size = len({var})\nif isinstance({var}, np.ndarray) and (<np.ndarray> {var}).descr.type_num == {t.cython_nptype}:\n    {var}_data = <{t.cython_npctypes_nopred[0]} *> np.PyArray_DATA(<np.ndarray> {var})\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = {var}_data[i{var}]\nelse:\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = <{t.cython_npctypes_nopred[0]}> {var}[i{var}]\n', '{proxy_name}'), 'uchar': ('{var}_bytes = {var}.encode()', '(<unsigned char *> {var}_bytes)[0]'), 'float64': ('<double> {var}', False), ('float64', '*'): ('cdef double {proxy_name}_ = {var}', '&{proxy_name}_'), 'pair': ('{proxy_name} = {t.cython_pytype}({var}, not isinstance({var}, {t.cython_cytype}))', '{proxy_name}.pair_ptr[0]'), 'float32': ('<float> {var}', False), TypeMatcher((('vector', MatchAny, 0), '&')): ('# {var} is a {t.type}\ncdef int i{var}\ncdef int {var}_size\ncdef {t.cython_npctypes_nopred[0]} * {var}_data\n{var}_size = len({var})\nif isinstance({var}, np.ndarray) and (<np.ndarray> {var}).descr.type_num == {t.cython_nptype}:\n    {var}_data = <{t.cython_npctypes_nopred[0]} *> np.PyArray_DATA(<np.ndarray> {var})\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = {var}_data[i{var}]\nelse:\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = <{t.cython_npctypes_nopred[0]}> {var}[i{var}]\n', '{proxy_name}'), 'uint16': ('<unsigned short> {var}', False), 'file': ('{extra_types}PyFile_AsFile({var})[0]', False), 'dict': ('dict({var})', False), 'str': ('{var}_bytes = {var}.encode()', 'std_string(<char *> {var}_bytes)'), TypeMatcher((('vector', MatchAny, 'const'), '&')): ('# {var} is a {t.type}\ncdef int i{var}\ncdef int {var}_size\ncdef {t.cython_npctypes_nopred[0]} * {var}_data\n{var}_size = len({var})\nif isinstance({var}, np.ndarray) and (<np.ndarray> {var}).descr.type_num == {t.cython_nptype}:\n    {var}_data = <{t.cython_npctypes_nopred[0]} *> np.PyArray_DATA(<np.ndarray> {var})\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = {var}_data[i{var}]\nelse:\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = <{t.cython_npctypes_nopred[0]}> {var}[i{var}]\n', '{proxy_name}'), TypeMatcher(((('vector', MatchAny, 0), '&'), 'const')): ('# {var} is a {t.type}\ncdef int i{var}\ncdef int {var}_size\ncdef {t.cython_npctypes_nopred[0]} * {var}_data\n{var}_size = len({var})\nif isinstance({var}, np.ndarray) and (<np.ndarray> {var}).descr.type_num == {t.cython_nptype}:\n    {var}_data = <{t.cython_npctypes_nopred[0]} *> np.PyArray_DATA(<np.ndarray> {var})\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = {var}_data[i{var}]\nelse:\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = <{t.cython_npctypes_nopred[0]}> {var}[i{var}]\n', '{proxy_name}'), 'function_pointer': <function TypeSystem.__init__.<locals>.cython_py2c_conv_function_pointer at 0x1080c3840>, ('vector', 'char', 0): ('# {var} is a {t.type}\ncdef int i{var}\ncdef int {var}_size\ncdef {t.cython_npctypes[0]} * {var}_data\n{var}_size = len({var})\nif isinstance({var}, np.ndarray) and (<np.ndarray> {var}).descr.type_num == <int> {t.cython_nptype}:\n    {var}_data = <{t.cython_npctypes[0]} *> np.PyArray_DATA(<np.ndarray> {var})\n    {proxy_name} = {t.cython_ctype}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = {var}[i{var}]\nelse:\n    {proxy_name} = {t.cython_ctype}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        _ = {var}[i{var}].encode()\n        {proxy_name}[i{var}] = deref(<char *> _)\n', '{proxy_name}'), 'int32': ('<int> {var}', False), TypeMatcher(((('vector', MatchAny, 0), 'const'), '&')): ('# {var} is a {t.type}\ncdef int i{var}\ncdef int {var}_size\ncdef {t.cython_npctypes_nopred[0]} * {var}_data\n{var}_size = len({var})\nif isinstance({var}, np.ndarray) and (<np.ndarray> {var}).descr.type_num == {t.cython_nptype}:\n    {var}_data = <{t.cython_npctypes_nopred[0]} *> np.PyArray_DATA(<np.ndarray> {var})\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = {var}_data[i{var}]\nelse:\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = <{t.cython_npctypes_nopred[0]}> {var}[i{var}]\n', '{proxy_name}'), 'vector': ('# {var} is a {t.type}\ncdef int i{var}\ncdef int {var}_size\ncdef {t.cython_npctypes[0]} * {var}_data\n{var}_size = len({var})\nif isinstance({var}, np.ndarray) and (<np.ndarray> {var}).descr.type_num == {t.cython_nptype}:\n    {var}_data = <{t.cython_npctypes[0]} *> np.PyArray_DATA(<np.ndarray> {var})\n    {proxy_name} = {t.cython_ctype}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = {var}_data[i{var}]\nelse:\n    {proxy_name} = {t.cython_ctype}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = <{t.cython_npctypes[0]}> {var}[i{var}]\n', '{proxy_name}'), 'uint32': ('<{t.cython_ctype}> long({var})', False), 'int16': ('<short> {var}', False), TypeMatcher((('vector', MatchAny, '&'), 0)): ('# {var} is a {t.type}\ncdef int i{var}\ncdef int {var}_size\ncdef {t.cython_npctypes_nopred[0]} * {var}_data\n{var}_size = len({var})\nif isinstance({var}, np.ndarray) and (<np.ndarray> {var}).descr.type_num == {t.cython_nptype}:\n    {var}_data = <{t.cython_npctypes_nopred[0]} *> np.PyArray_DATA(<np.ndarray> {var})\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = {var}_data[i{var}]\nelse:\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = <{t.cython_npctypes_nopred[0]}> {var}[i{var}]\n', '{proxy_name}'), 'bool': ('<bint> {var}', False), 'void': ('NULL', False), 'char': ('{var}_bytes = {var}.encode()', '(<char *> {var}_bytes)[0]'), 'set': ('{proxy_name} = {t.cython_pytype}({var}, not isinstance({var}, {t.cython_cytype}))', '{proxy_name}.set_ptr[0]'), 'nucid': ('nucname.zzaaam({var})', False), TypeMatcher((('int32', ('enum', MatchAny, MatchAny)), '*')): ('cdef int {proxy_name}_ = {var}', '&{proxy_name}_'), ('uchar', '*'): ('{var}_bytes = {var}.encode()', '<unsigned char *> {var}_bytes'), 'map': ('{proxy_name} = {t.cython_pytype}({var}, not isinstance({var}, {t.cython_cytype}))', '{proxy_name}.map_ptr[0]'), ('int32', '*'): ('cdef int {proxy_name}_ = {var}', '&{proxy_name}_'), 'uint64': ('<unsigned long long> {var}', False), (('char', '*'), '*'): ('cdef char * {var}_bytes_\n{var}_bytes = {var}[0].encode()\n{var}_bytes_ = {var}_bytes\n{proxy_name} = &{var}_bytes_', '{proxy_name}'), ('uint32', '*'): ('cdef unsigned int {proxy_name}_ = {var}', '&{proxy_name}_')}, TypeSystem()), cython_pyimports=_LazyImportDict({'function': <function TypeSystem.__init__.<locals>.cython_pyimports_functionish at 0x1080c3598>, 'exception': (None,), 'complex128': (None,), 'float128': (None,), 'set': (('{stlcontainers}',), ('collections',)), 'int64': (None,), 'uchar': (None,), 'float64': (None,), 'pair': (('{stlcontainers}',),), 'float32': (None,), 'nucid': (('pyne', 'nucname'),), 'file': (None,), 'dict': (None,), 'str': (None,), 'function_pointer': <function TypeSystem.__init__.<locals>.cython_pyimports_functionish at 0x1080c3598>, 'int32': (None,), 'vector': (('numpy', 'as', 'np'),), 'uint32': (None,), 'int16': (None,), 'nucname': (('pyne', 'nucname'),), 'bool': (None,), 'void': (None,), 'char': (None,), 'uint16': (None,), 'map': (('{stlcontainers}',), ('collections',)), 'uint64': (None,)}, TypeSystem()), cython_pytypes=_LazyConfigDict({'exception': 'Exception', 'complex128': 'object', 'float128': 'np.float128', 'set': '{stlcontainers}Set{value_type}', 'int64': 'int', 'uchar': 'str', 'float64': 'float', 'pair': '{stlcontainers}Pair{value_type}', 'float32': 'float', 'file': 'file', 'dict': 'dict', 'str': 'str', 'int32': 'int', 'vector': 'np.ndarray', 'uint32': 'int', 'int16': 'int', 'bool': 'bool', 'void': 'object', 'char': 'str', 'uint16': 'int', 'map': '{stlcontainers}Map{key_type}{value_type}', 'uint64': 'int'}, TypeSystem()), dtypes='dtypes', extra_types='xdress_extra_types', from_pytypes={'file': ['file'], 'str': ['basestring'], ('file', '*'): ['file'], 'int64': ['int'], 'set': ['collections.Set', 'list', 'basestring', 'tuple'], 'int32': ['int'], 'float32': ['float', 'int'], 'vector': ['list', 'tuple', 'np.ndarray'], 'uint32': ['int'], 'int16': ['int'], 'uchar': ['basestring'], 'char': ['basestring'], 'float64': ['float', 'int'], 'complex128': ['complex', 'float'], 'uint16': ['int'], 'map': ['collections.Mapping', 'list', 'tuple'], 'uint64': ['int']}, humannames={'exception': 'exception', 'complex128': 'complex', 'float128': 'long double', 'set': 'set of {value_type}', 'int128': 'very long integer', 'int64': 'long integer', 'uint128': 'unsigned very long integer', 'uchar': 'unsigned character', 'float64': 'double', 'pair': '({key_type}, {value_type}) pair', 'float32': 'float', 'file': 'file', 'dict': 'dict of ({key_type}, {value_type}) items', 'str': 'string', 'int32': 'integer', 'vector': 'vector [ndarray] of {value_type}', 'uint32': 'unsigned integer', 'int16': 'short integer', 'bool': 'boolean', 'char': 'character', 'uint16': 'unsigned short integer', 'map': 'map of ({key_type}, {value_type}) items', 'uint64': 'unsigned long integer'}, numpy_types=_LazyConfigDict({'complex128': 'np.NPY_COMPLEX128', 'float128': 'np.NPY_FLOAT128', 'int64': 'np.NPY_INT64', 'int32': 'np.NPY_INT32', 'float32': 'np.NPY_FLOAT32', 'uint32': 'np.NPY_UINT32', 'int16': 'np.NPY_INT16', 'bool': 'np.NPY_BOOL', 'uchar': 'np.NPY_UBYTE', 'char': 'np.NPY_BYTE', 'float64': 'np.NPY_FLOAT64', 'uint16': 'np.NPY_UINT16', 'uint64': 'np.NPY_UINT64', 'void': 'np.NPY_VOID'}, TypeSystem()), refined_types={('enum', ('name', 'str'), ('aliases', ('dict', 'str', 'int32', 0))): 'int32', 'nucid': 'int32', 'nucname': 'str', ('function', ('arguments', ('list', ('pair', 'str', 'type'))), ('returns', 'type')): 'void', ('function_pointer', ('arguments', ('list', ('pair', 'str', 'type'))), ('returns', 'type')): ('void', '*')}, stlcontainers='stlcontainers', template_types={'function': ('arguments', 'returns'), 'dict': ('key_type', 'value_type'), 'tuple': ('value_type',), 'enum': ('name', 'aliases'), 'list': ('value_type',), 'set': ('value_type',), 'function_pointer': ('arguments', 'returns'), 'pair': ('key_type', 'value_type'), 'map': ('key_type', 'value_type'), 'vector': ('value_type',)}, type_aliases=_LazyConfigDict({'np.NPY_UINT64': 'uint64', 'ui': 'uint32', 'int': 'int32', 'np.NPY_BYTE': 'char', 'np.NPY_VOID': 'void', 'v': 'void', 'np.NPY_UINT32': 'uint32', '_IO_FILE': 'file', 'np.NPY_BOOL': 'bool', 's': 'str', 'uint': 'uint32', 'NPY_INT64': 'int64', 'NPY_COMPLEX128': 'complex128', 'ui16': 'uint128', 'NPY_UBYTE': 'uchar', 'NPY_VOID': 'void', 'np.NPY_INT16': 'int16', 'np.NPY_STRING': 'str', 'f': 'float64', 'f4': 'float32', 'i8': 'int64', 'NPY_INT16': 'int16', 'NPY_STRING': 'str', 'i4': 'int32', 'NPY_UINT64': 'uint64', 'NPY_BOOL': 'bool', 'float': 'float64', 'np.NPY_INT64': 'int64', 'NPY_UINT32': 'uint32', 'ui2': 'uint16', 'i16': 'int128', 'np.NPY_FLOAT32': 'float32', 'b': 'bool', 'np.NPY_OBJECT': 'void', 'NPY_BYTE': 'char', 'NPY_UINT16': 'uint16', 'complex': 'complex128', 'NPY_OBJECT': 'void', 'np.NPY_INT32': 'int32', 'i': 'int32', 'double': 'float64', 'np.NPY_UINT16': 'uint16', 'ui8': 'uint64', 'np.NPY_UBYTE': 'uchar', 'NPY_FLOAT32': 'float32', 'ui4': 'uint32', 'i2': 'int16', 'np.NPY_FLOAT64': 'float64', 'np.NPY_COMPLEX128': 'complex128', 'f16': 'float128', 'string': 'str', 'NPY_FLOAT64': 'float64', 'NPY_INT32': 'int32', 'f8': 'float64', 'FILE': 'file'}, TypeSystem()), variable_namespace={}),
 undefines=[],
 variables=[],
 verbose=True,
 version=False)

~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~=[,,_,,]:3

Version Information:

    XDress: 0.4
    pycparser (optional): 2.14
    lxml (optional): None
    NumPy (optional): 1.10.4
    Cython (optional): 0.23.4

~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~=[,,_,,]:3

Current descripton cache contents:

{}

~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~=[,,_,,]:3

Current type system contents:

{'argument_kinds': {('vector', 'bool', 0): (TYPE,),
                    ('vector', 'char', 0): (TYPE,)},
 'base_types': {'bool',
                'char',
                'complex128',
                'exception',
                'file',
                'float128',
                'float32',
                'float64',
                'int128',
                'int16',
                'int32',
                'int64',
                'str',
                'type',
                'uchar',
                'uint128',
                'uint16',
                'uint32',
                'uint64',
                'void'},
 'cpp_types': _LazyConfigDict({False: 'false', True: 'true', 'exception': '{extra_types}exception', 'complex128': '{extra_types}complex_t', 'float128': 'long double', 'function': <function TypeSystem.__init__.<locals>.cpp_types_function at 0x101a58f28>, 'set': 'std::set', 'int64': 'long long', 'uchar': 'unsigned char', 'float64': 'double', 'pair': 'std::pair', 'float32': 'float', 'file': 'FILE', 'dict': 'std::map', 'str': 'std::string', 'function_pointer': <function TypeSystem.__init__.<locals>.cpp_types_function_pointer at 0x1080c32f0>, 'False': 'false', 'int32': 'int', 'vector': 'std::vector', 'uint32': 'unsigned long', 'int16': 'short', 'True': 'true', 'bool': 'bool', 'void': 'void', 'char': 'char', 'uint16': 'unsigned short', 'map': 'std::map', 'true': 'true', 'uint64': 'unsigned long long', 'false': 'false'}, TypeSystem()),
 'cython_c2py_conv': _LazyConverterDict({('bool', '*'): ('bool({var}[0])',), 'complex128': ('complex(float({var}.re), float({var}.im))',), 'float128': ('np.array({var}, dtype=np.float128)',), ('file', '*'): ('{extra_types}PyFile_FromFile({var}, "{var}", "r+", NULL)',), ('char', '*'): ('bytes({var}).decode()',), 'uchar': ('chr(<unsigned int> {var})',), ('int16', '*'): ('int({var}[0])',), 'float64': ('float({var})',), TypeMatcher(('set', MatchAny, '*')): ('{t.cython_pytype}(deref({var}))', '{proxy_name} = {t.cython_pytype}(False, False)\n{proxy_name}.set_ptr = {var}\n', 'if {cache_name} is None:\n    {proxy_name} = {t.cython_pytype}(False, False)\n    {proxy_name}.set_ptr = {var}\n    {cache_name} = {proxy_name}\n'), 'pair': ('{t.cython_pytype}({var})', '{proxy_name} = {t.cython_pytype}(False, False)\n{proxy_name}.pair_ptr = &{var}\n', 'if {cache_name} is None:\n    {proxy_name} = {t.cython_pytype}(False, False)\n    {proxy_name}.pair_ptr = &{var}\n    {cache_name} = {proxy_name}\n'), 'float32': ('float({var})',), TypeMatcher((('int32', ('enum', MatchAny, MatchAny)), '*')): ('int({var}[0])',), TypeMatcher((('enum', MatchAny, MatchAny), '*')): ('int({var}[0])',), 'str': ('bytes(<char *> {var}.c_str()).decode()',), ('vector', 'char', 0): ('cdef int i\n{proxy_name}_shape[0] = <np.npy_intp> {var}.size()\n{proxy_name} = np.empty({proxy_name}_shape[0], "U1")\nfor i in range({proxy_name}_shape[0]):\n    {proxy_name}[i] = chr(<int> {var}[i])\n', 'cdef int i\n{proxy_name}_shape[0] = <np.npy_intp> {var}.size()\n{proxy_name} = np.empty({proxy_name}_shape[0], "U1")\nfor i in range({proxy_name}_shape[0]):\n    {proxy_name}[i] = chr(<int> {var}[i])\n', 'cdef int i\nif {cache_name} is None:\n    {proxy_name}_shape[0] = <np.npy_intp> {var}.size()\n    for i in range({proxy_name}_shape[0]):\n        {proxy_name}[i] = chr(<int> {var}[i])\n    {cache_name} = {proxy_name}\n'), 'int32': ('int({var})',), TypeMatcher(((MatchAny, 'const'), '*')): <function TypeSystem.__init__.<locals>.<lambda> at 0x1080c37b8>, ('str', '*'): ('bytes(<char *> {var}[0].c_str()).decode()',), 'bool': ('bool({var})',), 'set': ('{t.cython_pytype}({var})', '{proxy_name} = {t.cython_pytype}(False, False)\n{proxy_name}.set_ptr = &{var}\n', 'if {cache_name} is None:\n    {proxy_name} = {t.cython_pytype}(False, False)\n    {proxy_name}.set_ptr = &{var}\n    {cache_name} = {proxy_name}\n'), ('vector', 'bool', 0): ('cdef int i\n{proxy_name}_shape[0] = <np.npy_intp> {var}.size()\n{proxy_name} = np.PyArray_SimpleNew(1, {proxy_name}_shape, {t.cython_nptypes[0]})\nfor i in range({proxy_name}_shape[0]):\n    {proxy_name}[i] = {var}[i]\n', 'cdef int i\n{proxy_name}_shape[0] = <np.npy_intp> {var}.size()\n{proxy_name} = np.PyArray_SimpleNew(1, {proxy_name}_shape, {t.cython_nptypes[0]})\nfor i in range({proxy_name}_shape[0]):\n    {proxy_name}[i] = {var}[i]\n', 'cdef int i\nif {cache_name} is None:\n    {proxy_name}_shape[0] = <np.npy_intp> {var}.size()\n    {proxy_name} = np.PyArray_SimpleNew(1, {proxy_name}_shape, {nptype[0]})\n    for i in range({proxy_name}_shape[0]):\n        {proxy_name}[i] = {var}[i]\n    {cache_name} = {proxy_name}\n'), 'map': ('{t.cython_pytype}({var})', '{proxy_name} = {t.cython_pytype}(False, False)\n{proxy_name}.map_ptr = &{var}\n', 'if {cache_name} is None:\n    {proxy_name} = {t.cython_pytype}(False, False)\n    {proxy_name}.map_ptr = &{var}\n    {cache_name} = {proxy_name}\n'), ('int32', '*'): ('int({var}[0])',), TypeMatcher(((MatchAny, 'const'), '&')): <function TypeSystem.__init__.<locals>.<lambda> at 0x1080c3730>, 'char': ('chr(<int> {var})',), 'int64': ('int({var})',), ('complex128', '*'): ('complex(float({var}[0].re), float({var}[0].im))',), ('float64', '*'): ('float({var}[0])',), 'nucid': ('nucname.zzaaam({var})',), ('uint16', '*'): ('int({var}[0])',), 'file': ('{extra_types}PyFile_FromFile(&{var}, "{var}", "r+", NULL)',), 'dict': ('dict({var})',), 'function_pointer': <function TypeSystem.__init__.<locals>.cython_c2py_conv_function_pointer at 0x1080c3620>, ('float128', '*'): ('np.array({var}[0], dtype=np.float128)',), 'uint64': ('int({var})',), ('uchar', '*'): ('bytes(<char *> {var}).decode()',), ('float32', '*'): ('float({var}[0])',), 'uint32': ('int({var})',), 'int16': ('int({var})',), 'nucname': ('nucname.name({var})',), 'void': ('None',), ('int64', '*'): ('int({var}[0])',), TypeMatcher((MatchAny, 'const')): <function TypeSystem.__init__.<locals>.<lambda> at 0x1080c36a8>, 'uint16': ('int({var})',), 'vector': ('{proxy_name}_shape[0] = <np.npy_intp> {var}.size()\n{proxy_name} = np.PyArray_SimpleNewFromData(1, {var}_shape, {t.cython_nptypes[0]}, &{var}[0])\n{proxy_name} = np.PyArray_Copy({proxy_name})\n', '{proxy_name}_shape[0] = <np.npy_intp> {var}.size()\n{proxy_name} = np.PyArray_SimpleNewFromData(1, {proxy_name}_shape, {t.cython_nptypes[0]}, &{var}[0])\n', 'if {cache_name} is None:\n    {proxy_name}_shape[0] = <np.npy_intp> {var}.size()\n    {proxy_name} = np.PyArray_SimpleNewFromData(1, {proxy_name}_shape, {t.cython_nptypes[0]}, &{var}[0])\n    {cache_name} = {proxy_name}\n'), ('uint32', '*'): ('int({var}[0])',)}, TypeSystem()),
 'cython_cimports': _LazyImportDict({'function': <function TypeSystem.__init__.<locals>.cython_cimports_functionish at 0x1080c3488>, 'exception': (('{extra_types}',),), 'complex128': (('{extra_types}',),), 'float128': (('{extra_types}',),), 'set': (('libcpp.set', 'set', 'cpp_set'),), 'int64': (('{extra_types}',),), 'uchar': (('{extra_types}',),), 'float64': (None,), 'pair': (('libcpp.utility', 'pair', 'cpp_pair'),), 'float32': (None,), 'nucid': (('pyne', 'cpp_nucname'),), 'file': (('libc.stdio', 'FILE', 'c_file'),), 'dict': (None,), 'str': (('libcpp.string', 'string', 'std_string'),), 'function_pointer': <function TypeSystem.__init__.<locals>.cython_cimports_functionish at 0x1080c3488>, 'int32': (None,), 'vector': (('libcpp.vector', 'vector', 'cpp_vector'),), 'uint32': (('{extra_types}',),), 'int16': (None,), 'nucname': (('pyne', 'cpp_nucname'), ('libcpp.string', 'string', 'std_string')), 'bool': (('libcpp', 'bool', 'cpp_bool'),), 'void': (None,), 'char': (None,), 'uint16': (('{extra_types}',),), 'map': (('libcpp.map', 'map', 'cpp_map'),), ('int32', '*'): 'int *', 'uint64': (('{extra_types}',),)}, TypeSystem()),
 'cython_classnames': _LazyConfigDict({'exception': 'Exception', 'complex128': 'Complex', 'float128': 'Longdouble', 'set': 'Set{value_type}', 'int64': 'Long', 'uchar': 'UChar', 'float64': 'Double', 'pair': 'Pair{key_type}{value_type}', 'float32': 'Float', 'nucid': 'Nucid', 'file': 'File', 'dict': 'Dict', 'str': 'Str', 'int32': 'Int', 'uint64': 'ULong', 'uint32': 'UInt', 'nucname': 'Nucname', 'bool': 'Bool', 'void': 'Void', 'char': 'Char', 'uint16': 'UShort', 'map': 'Map{key_type}{value_type}', 'vector': 'Vector{value_type}'}, TypeSystem()),
 'cython_ctypes': _LazyConfigDict({'function': <function TypeSystem.__init__.<locals>.cython_ctypes_function at 0x1080c3378>, 'exception': '{extra_types}exception', 'complex128': '{extra_types}complex_t', 'float128': '{extra_types}float128', 'set': 'cpp_set', 'int64': '{extra_types}int64', 'uchar': '{extra_types}uchar', 'float64': 'double', 'pair': 'cpp_pair', 'float32': 'float', 'file': 'c_file', 'dict': 'dict', 'str': 'std_string', 'function_pointer': <function TypeSystem.__init__.<locals>.cython_ctypes_function_pointer at 0x1080c3400>, 'int32': 'int', 'vector': 'cpp_vector', 'uint32': '{extra_types}uint32', 'int16': 'short', 'bool': 'cpp_bool', 'void': 'void', 'char': 'char', 'uint16': '{extra_types}uint16', 'map': 'cpp_map', 'uint64': '{extra_types}uint64'}, TypeSystem()),
 'cython_cyimports': _LazyImportDict({'function': <function TypeSystem.__init__.<locals>.cython_cyimports_functionish at 0x1080c3510>, 'exception': (('{extra_types}',),), 'complex128': (('{extra_types}',),), 'float128': (None,), 'set': (('{stlcontainers}',),), 'int64': (None,), 'uchar': (None,), 'float64': (None,), 'pair': (('{stlcontainers}',),), 'float32': (None,), 'nucid': (('pyne', 'nucname'),), 'file': (('{extra_types}',),), 'dict': (None,), 'str': (None,), 'function_pointer': <function TypeSystem.__init__.<locals>.cython_cyimports_functionish at 0x1080c3510>, 'int32': (None,), 'vector': (('numpy', 'as', 'np'), ('{dtypes}',)), 'uint32': (None,), 'int16': (None,), 'nucname': (('pyne', 'nucname'),), 'bool': (None,), 'void': (None,), 'char': (None,), 'uint16': (None,), 'map': (('{stlcontainers}',),), 'uint64': (None,)}, TypeSystem()),
 'cython_cytypes': _LazyConfigDict({'function': 'object', 'exception': '{extra_types}exception', 'complex128': 'object', 'float128': 'long double', 'set': '{stlcontainers}_Set{value_type}', 'int64': 'long long', 'uchar': 'unsigned char', 'float64': 'float', 'pair': '{stlcontainers}_Pair{value_type}', 'float32': 'float', 'file': 'c_file', 'dict': 'dict', 'str': 'char *', 'function_pointer': 'object', 'int32': 'int', 'vector': 'np.ndarray', 'uint32': 'unsigned long', 'int16': 'short', 'bool': 'bool', 'void': 'void', 'char': 'char', 'uint16': 'unsigned short', 'map': '{stlcontainers}_Map{key_type}{value_type}', ('int32', '*'): 'int *', 'uint64': 'unsigned long long'}, TypeSystem()),
 'cython_functionnames': _LazyConfigDict({'function': 'function', 'exception': 'exception', 'complex128': 'complex', 'float128': 'longdouble', 'set': 'set_{value_type}', 'int64': 'long', 'uchar': 'uchar', 'float64': 'double', 'pair': 'pair_{key_type}_{value_type}', 'float32': 'float', 'nucid': 'nucid', 'file': 'file', 'dict': 'dict', 'str': 'str', 'function_pointer': 'functionpointer', 'int32': 'int', 'vector': 'vector_{value_type}', 'uint32': 'uint', 'int16': 'short', 'nucname': 'nucname', 'bool': 'bool', 'void': 'void', 'char': 'char', 'uint16': 'ushort', 'map': 'map_{key_type}_{value_type}', 'uint64': 'ulong'}, TypeSystem()),
 'cython_py2c_conv': _LazyConverterDict({'complex128': ('{extra_types}py2c_complex({var})', False), 'float128': ('<long double> {var}', False), ('file', '*'): ('{extra_types}PyFile_AsFile({var})', False), ('char', '*'): ('{var}_bytes = {var}.encode()', '<char *> {var}_bytes'), TypeMatcher((('vector', MatchAny, '&'), 'const')): ('# {var} is a {t.type}\ncdef int i{var}\ncdef int {var}_size\ncdef {t.cython_npctypes_nopred[0]} * {var}_data\n{var}_size = len({var})\nif isinstance({var}, np.ndarray) and (<np.ndarray> {var}).descr.type_num == {t.cython_nptype}:\n    {var}_data = <{t.cython_npctypes_nopred[0]} *> np.PyArray_DATA(<np.ndarray> {var})\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = {var}_data[i{var}]\nelse:\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = <{t.cython_npctypes_nopred[0]}> {var}[i{var}]\n', '{proxy_name}'), TypeMatcher((('enum', MatchAny, MatchAny), '*')): ('cdef int {proxy_name}_ = {var}', '&{proxy_name}_'), 'nucname': ('nucname.name({var})', False), 'int64': ('<long long> {var}', False), ('void', '*'): ('NULL', False), TypeMatcher(('vector', MatchAny, '&')): ('# {var} is a {t.type}\ncdef int i{var}\ncdef int {var}_size\ncdef {t.cython_npctypes_nopred[0]} * {var}_data\n{var}_size = len({var})\nif isinstance({var}, np.ndarray) and (<np.ndarray> {var}).descr.type_num == {t.cython_nptype}:\n    {var}_data = <{t.cython_npctypes_nopred[0]} *> np.PyArray_DATA(<np.ndarray> {var})\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = {var}_data[i{var}]\nelse:\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = <{t.cython_npctypes_nopred[0]}> {var}[i{var}]\n', '{proxy_name}'), 'uchar': ('{var}_bytes = {var}.encode()', '(<unsigned char *> {var}_bytes)[0]'), 'float64': ('<double> {var}', False), ('float64', '*'): ('cdef double {proxy_name}_ = {var}', '&{proxy_name}_'), 'pair': ('{proxy_name} = {t.cython_pytype}({var}, not isinstance({var}, {t.cython_cytype}))', '{proxy_name}.pair_ptr[0]'), 'float32': ('<float> {var}', False), TypeMatcher((('vector', MatchAny, 0), '&')): ('# {var} is a {t.type}\ncdef int i{var}\ncdef int {var}_size\ncdef {t.cython_npctypes_nopred[0]} * {var}_data\n{var}_size = len({var})\nif isinstance({var}, np.ndarray) and (<np.ndarray> {var}).descr.type_num == {t.cython_nptype}:\n    {var}_data = <{t.cython_npctypes_nopred[0]} *> np.PyArray_DATA(<np.ndarray> {var})\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = {var}_data[i{var}]\nelse:\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = <{t.cython_npctypes_nopred[0]}> {var}[i{var}]\n', '{proxy_name}'), 'uint16': ('<unsigned short> {var}', False), 'file': ('{extra_types}PyFile_AsFile({var})[0]', False), 'dict': ('dict({var})', False), 'str': ('{var}_bytes = {var}.encode()', 'std_string(<char *> {var}_bytes)'), TypeMatcher((('vector', MatchAny, 'const'), '&')): ('# {var} is a {t.type}\ncdef int i{var}\ncdef int {var}_size\ncdef {t.cython_npctypes_nopred[0]} * {var}_data\n{var}_size = len({var})\nif isinstance({var}, np.ndarray) and (<np.ndarray> {var}).descr.type_num == {t.cython_nptype}:\n    {var}_data = <{t.cython_npctypes_nopred[0]} *> np.PyArray_DATA(<np.ndarray> {var})\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = {var}_data[i{var}]\nelse:\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = <{t.cython_npctypes_nopred[0]}> {var}[i{var}]\n', '{proxy_name}'), TypeMatcher(((('vector', MatchAny, 0), '&'), 'const')): ('# {var} is a {t.type}\ncdef int i{var}\ncdef int {var}_size\ncdef {t.cython_npctypes_nopred[0]} * {var}_data\n{var}_size = len({var})\nif isinstance({var}, np.ndarray) and (<np.ndarray> {var}).descr.type_num == {t.cython_nptype}:\n    {var}_data = <{t.cython_npctypes_nopred[0]} *> np.PyArray_DATA(<np.ndarray> {var})\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = {var}_data[i{var}]\nelse:\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = <{t.cython_npctypes_nopred[0]}> {var}[i{var}]\n', '{proxy_name}'), 'function_pointer': <function TypeSystem.__init__.<locals>.cython_py2c_conv_function_pointer at 0x1080c3840>, ('vector', 'char', 0): ('# {var} is a {t.type}\ncdef int i{var}\ncdef int {var}_size\ncdef {t.cython_npctypes[0]} * {var}_data\n{var}_size = len({var})\nif isinstance({var}, np.ndarray) and (<np.ndarray> {var}).descr.type_num == <int> {t.cython_nptype}:\n    {var}_data = <{t.cython_npctypes[0]} *> np.PyArray_DATA(<np.ndarray> {var})\n    {proxy_name} = {t.cython_ctype}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = {var}[i{var}]\nelse:\n    {proxy_name} = {t.cython_ctype}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        _ = {var}[i{var}].encode()\n        {proxy_name}[i{var}] = deref(<char *> _)\n', '{proxy_name}'), 'int32': ('<int> {var}', False), TypeMatcher(((('vector', MatchAny, 0), 'const'), '&')): ('# {var} is a {t.type}\ncdef int i{var}\ncdef int {var}_size\ncdef {t.cython_npctypes_nopred[0]} * {var}_data\n{var}_size = len({var})\nif isinstance({var}, np.ndarray) and (<np.ndarray> {var}).descr.type_num == {t.cython_nptype}:\n    {var}_data = <{t.cython_npctypes_nopred[0]} *> np.PyArray_DATA(<np.ndarray> {var})\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = {var}_data[i{var}]\nelse:\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = <{t.cython_npctypes_nopred[0]}> {var}[i{var}]\n', '{proxy_name}'), 'vector': ('# {var} is a {t.type}\ncdef int i{var}\ncdef int {var}_size\ncdef {t.cython_npctypes[0]} * {var}_data\n{var}_size = len({var})\nif isinstance({var}, np.ndarray) and (<np.ndarray> {var}).descr.type_num == {t.cython_nptype}:\n    {var}_data = <{t.cython_npctypes[0]} *> np.PyArray_DATA(<np.ndarray> {var})\n    {proxy_name} = {t.cython_ctype}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = {var}_data[i{var}]\nelse:\n    {proxy_name} = {t.cython_ctype}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = <{t.cython_npctypes[0]}> {var}[i{var}]\n', '{proxy_name}'), 'uint32': ('<{t.cython_ctype}> long({var})', False), 'int16': ('<short> {var}', False), TypeMatcher((('vector', MatchAny, '&'), 0)): ('# {var} is a {t.type}\ncdef int i{var}\ncdef int {var}_size\ncdef {t.cython_npctypes_nopred[0]} * {var}_data\n{var}_size = len({var})\nif isinstance({var}, np.ndarray) and (<np.ndarray> {var}).descr.type_num == {t.cython_nptype}:\n    {var}_data = <{t.cython_npctypes_nopred[0]} *> np.PyArray_DATA(<np.ndarray> {var})\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = {var}_data[i{var}]\nelse:\n    {proxy_name} = {t.cython_ctype_nopred}(<size_t> {var}_size)\n    for i{var} in range({var}_size):\n        {proxy_name}[i{var}] = <{t.cython_npctypes_nopred[0]}> {var}[i{var}]\n', '{proxy_name}'), 'bool': ('<bint> {var}', False), 'void': ('NULL', False), 'char': ('{var}_bytes = {var}.encode()', '(<char *> {var}_bytes)[0]'), 'set': ('{proxy_name} = {t.cython_pytype}({var}, not isinstance({var}, {t.cython_cytype}))', '{proxy_name}.set_ptr[0]'), 'nucid': ('nucname.zzaaam({var})', False), TypeMatcher((('int32', ('enum', MatchAny, MatchAny)), '*')): ('cdef int {proxy_name}_ = {var}', '&{proxy_name}_'), ('uchar', '*'): ('{var}_bytes = {var}.encode()', '<unsigned char *> {var}_bytes'), 'map': ('{proxy_name} = {t.cython_pytype}({var}, not isinstance({var}, {t.cython_cytype}))', '{proxy_name}.map_ptr[0]'), ('int32', '*'): ('cdef int {proxy_name}_ = {var}', '&{proxy_name}_'), 'uint64': ('<unsigned long long> {var}', False), (('char', '*'), '*'): ('cdef char * {var}_bytes_\n{var}_bytes = {var}[0].encode()\n{var}_bytes_ = {var}_bytes\n{proxy_name} = &{var}_bytes_', '{proxy_name}'), ('uint32', '*'): ('cdef unsigned int {proxy_name}_ = {var}', '&{proxy_name}_')}, TypeSystem()),
 'cython_pyimports': _LazyImportDict({'function': <function TypeSystem.__init__.<locals>.cython_pyimports_functionish at 0x1080c3598>, 'exception': (None,), 'complex128': (None,), 'float128': (None,), 'set': (('{stlcontainers}',), ('collections',)), 'int64': (None,), 'uchar': (None,), 'float64': (None,), 'pair': (('{stlcontainers}',),), 'float32': (None,), 'nucid': (('pyne', 'nucname'),), 'file': (None,), 'dict': (None,), 'str': (None,), 'function_pointer': <function TypeSystem.__init__.<locals>.cython_pyimports_functionish at 0x1080c3598>, 'int32': (None,), 'vector': (('numpy', 'as', 'np'),), 'uint32': (None,), 'int16': (None,), 'nucname': (('pyne', 'nucname'),), 'bool': (None,), 'void': (None,), 'char': (None,), 'uint16': (None,), 'map': (('{stlcontainers}',), ('collections',)), 'uint64': (None,)}, TypeSystem()),
 'cython_pytypes': _LazyConfigDict({'exception': 'Exception', 'complex128': 'object', 'float128': 'np.float128', 'set': '{stlcontainers}Set{value_type}', 'int64': 'int', 'uchar': 'str', 'float64': 'float', 'pair': '{stlcontainers}Pair{value_type}', 'float32': 'float', 'file': 'file', 'dict': 'dict', 'str': 'str', 'int32': 'int', 'vector': 'np.ndarray', 'uint32': 'int', 'int16': 'int', 'bool': 'bool', 'void': 'object', 'char': 'str', 'uint16': 'int', 'map': '{stlcontainers}Map{key_type}{value_type}', 'uint64': 'int'}, TypeSystem()),
 'dtypes': 'dtypes',
 'extra_types': 'xdress_extra_types',
 'from_pytypes': {'char': ['basestring'],
                  'complex128': ['complex', 'float'],
                  'file': ['file'],
                  'float32': ['float', 'int'],
                  'float64': ['float', 'int'],
                  'int16': ['int'],
                  'int32': ['int'],
                  'int64': ['int'],
                  'map': ['collections.Mapping', 'list', 'tuple'],
                  'set': ['collections.Set', 'list', 'basestring', 'tuple'],
                  'str': ['basestring'],
                  'uchar': ['basestring'],
                  'uint16': ['int'],
                  'uint32': ['int'],
                  'uint64': ['int'],
                  'vector': ['list', 'tuple', 'np.ndarray'],
                  ('file', '*'): ['file']},
 'humannames': {'bool': 'boolean',
                'char': 'character',
                'complex128': 'complex',
                'dict': 'dict of ({key_type}, {value_type}) items',
                'exception': 'exception',
                'file': 'file',
                'float128': 'long double',
                'float32': 'float',
                'float64': 'double',
                'int128': 'very long integer',
                'int16': 'short integer',
                'int32': 'integer',
                'int64': 'long integer',
                'map': 'map of ({key_type}, {value_type}) items',
                'pair': '({key_type}, {value_type}) pair',
                'set': 'set of {value_type}',
                'str': 'string',
                'uchar': 'unsigned character',
                'uint128': 'unsigned very long integer',
                'uint16': 'unsigned short integer',
                'uint32': 'unsigned integer',
                'uint64': 'unsigned long integer',
                'vector': 'vector [ndarray] of {value_type}'},
 'numpy_types': _LazyConfigDict({'complex128': 'np.NPY_COMPLEX128', 'float128': 'np.NPY_FLOAT128', 'int64': 'np.NPY_INT64', 'int32': 'np.NPY_INT32', 'float32': 'np.NPY_FLOAT32', 'uint32': 'np.NPY_UINT32', 'int16': 'np.NPY_INT16', 'bool': 'np.NPY_BOOL', 'uchar': 'np.NPY_UBYTE', 'char': 'np.NPY_BYTE', 'float64': 'np.NPY_FLOAT64', 'uint16': 'np.NPY_UINT16', 'uint64': 'np.NPY_UINT64', 'void': 'np.NPY_VOID'}, TypeSystem()),
 'refined_types': {'nucid': 'int32',
                   'nucname': 'str',
                   ('enum', ('name', 'str'), ('aliases', ('dict', 'str', 'int32', 0))): 'int32',
                   ('function', ('arguments', ('list', ('pair', 'str', 'type'))), ('returns', 'type')): 'void',
                   ('function_pointer', ('arguments', ('list', ('pair', 'str', 'type'))), ('returns', 'type')): ('void',
                                                                                                                 '*')},
 'stlcontainers': 'stlcontainers',
 'template_types': {'dict': ('key_type', 'value_type'),
                    'enum': ('name', 'aliases'),
                    'function': ('arguments', 'returns'),
                    'function_pointer': ('arguments', 'returns'),
                    'list': ('value_type',),
                    'map': ('key_type', 'value_type'),
                    'pair': ('key_type', 'value_type'),
                    'set': ('value_type',),
                    'tuple': ('value_type',),
                    'vector': ('value_type',)},
 'type_aliases': _LazyConfigDict({'np.NPY_UINT64': 'uint64', 'ui': 'uint32', 'int': 'int32', 'np.NPY_BYTE': 'char', 'np.NPY_VOID': 'void', 'v': 'void', 'np.NPY_UINT32': 'uint32', '_IO_FILE': 'file', 'np.NPY_BOOL': 'bool', 's': 'str', 'uint': 'uint32', 'NPY_INT64': 'int64', 'NPY_COMPLEX128': 'complex128', 'ui16': 'uint128', 'NPY_UBYTE': 'uchar', 'NPY_VOID': 'void', 'np.NPY_INT16': 'int16', 'np.NPY_STRING': 'str', 'f': 'float64', 'f4': 'float32', 'i8': 'int64', 'NPY_INT16': 'int16', 'NPY_STRING': 'str', 'i4': 'int32', 'NPY_UINT64': 'uint64', 'NPY_BOOL': 'bool', 'float': 'float64', 'np.NPY_INT64': 'int64', 'NPY_UINT32': 'uint32', 'ui2': 'uint16', 'i16': 'int128', 'np.NPY_FLOAT32': 'float32', 'b': 'bool', 'np.NPY_OBJECT': 'void', 'NPY_BYTE': 'char', 'NPY_UINT16': 'uint16', 'complex': 'complex128', 'NPY_OBJECT': 'void', 'np.NPY_INT32': 'int32', 'i': 'int32', 'double': 'float64', 'np.NPY_UINT16': 'uint16', 'ui8': 'uint64', 'np.NPY_UBYTE': 'uchar', 'NPY_FLOAT32': 'float32', 'ui4': 'uint32', 'i2': 'int16', 'np.NPY_FLOAT64': 'float64', 'np.NPY_COMPLEX128': 'complex128', 'f16': 'float128', 'string': 'str', 'NPY_FLOAT64': 'float64', 'NPY_INT32': 'int32', 'f8': 'float64', 'FILE': 'file'}, TypeSystem()),
 'variable_namespace': {}}

~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~\_/~=[,,_,,]:3

Autodescriber parsers available:

{'clang': False, 'gccxml': False, 'pycparser': True}

Autoall:

allsrc = {'src/common.h': 'c'}

varhasstar = True

fnchasstar = False

clshasstar = False

